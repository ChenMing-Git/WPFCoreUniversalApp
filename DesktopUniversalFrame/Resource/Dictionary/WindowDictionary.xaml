<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:DesktopUniversalFrame.Common.ValueConverter"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <converter:SwitchWindowSizeConverter x:Key="SwitchWindowSizeConverter"/>

    <Style x:Key="CaptionButtonVisualStateStyle" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--同一个视觉状态组的状态不可同时存在，互斥的，不同视觉状态组的状态可以共存-->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="backgroundElement" 
                                                        Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                        To="Transparent" Duration="0:0:0.3">
                                        </ColorAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="backgroundElement"
                                                        Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                        To="BlueViolet" Duration="0:0:0.3"/>
                                        <DoubleAnimation Storyboard.TargetName="angle" 
                                                         Storyboard.TargetProperty="Angle"
                                                         From="0" To="180" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnFocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Rectangle x:Name="backgroundElement" Fill="Transparent" Stroke="{TemplateBinding Foreground}" StrokeThickness="0"/>
                        <ContentPresenter x:Name="cp" Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                            <ContentPresenter.LayoutTransform>
                                <RotateTransform x:Name="angle" Angle="0" CenterX="10" CenterY="10"/>
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Content" TargetName="cp">
                                <Setter.Value>
                                    <Canvas Width="30" Height="30">
                                        <Path Data="M 10,10 L 20,20 M 10,20 L 20,10" Stroke="WhiteSmoke" StrokeThickness="2"/>
                                    </Canvas>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CaptionButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}" CornerRadius="1">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="BlueViolet" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
        
    <!--经测试，多个button引用同一个key时，content(Path)会失效-->
    <Style x:Key="MinCaptionButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <materialDesign:PackIcon Kind="WindowMinimize"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MaxCaptionButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <materialDesign:PackIcon Kind="WindowMaximize"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NormalCaptionButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <materialDesign:PackIcon Kind="WindowRestore"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CloseCaptionButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <materialDesign:PackIcon Kind="WindowClose"/>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>